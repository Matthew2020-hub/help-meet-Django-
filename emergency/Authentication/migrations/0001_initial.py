# Generated by Django 3.2.10 on 2022-07-03 20:55

import Authentication.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Estate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estate_name', models.CharField(max_length=200, unique=True)),
                ('estate_profile_image', models.ImageField(upload_to='estate/')),
                ('estate_id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, null=True, unique=True)),
                ('estate_address', models.CharField(max_length=400, unique=True)),
                ('estate_country', django_countries.fields.CountryField(max_length=2)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=30, null=True)),
                ('name', models.CharField(max_length=250, null=True, verbose_name='Full Name')),
                ('house_address', models.CharField(max_length=500, null=True, unique=True)),
                ('estate_name', models.CharField(max_length=250, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('tenant_id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, null=True, unique=True)),
                ('profile_image', models.ImageField(null=True, upload_to='profile_image/')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_user', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_estate_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('is_verify', models.BooleanField(default=False)),
                ('estate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Authentication.estate')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', Authentication.models.CustomUserManager()),
            ],
        ),
    ]
